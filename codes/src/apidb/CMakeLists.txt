CMAKE_MINIMUM_REQUIRED(VERSION 3.13)
PROJECT(codes VERSION 0.1.0 LANGUAGES CXX)

EXECUTE_PROCESS(COMMAND date +"%Y%m%d%H%I" OUTPUT_VARIABLE codel_VERSION_BUILD)
SET(codes_VERSION_STAGE "alpha")

	
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(toolkit-clientdb_VERSION_STAGE "beta")
CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/config.h.in" "${PROJECT_SOURCE_DIR}/config.h")
	
FIND_PACKAGE(toolkit-common-c++ REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../../cmake/Modules/)
IF(TOOLKIT_COMMON_FOUND)
	INCLUDE_DIRECTORIES(${TOOLKIT_COMMON_INCLUDE_DIR})
ENDIF()
FIND_PACKAGE (sqlite3 REQUIRED PATHS ${PROJECT_SOURCE_DIR}/../../../cmake/Modules/)
IF(SQLITE3_FOUND)
	INCLUDE_DIRECTORIES(${SQLITE3_INCLUDE_DIRS})
ENDIF (SQLITE3_FOUND)
ADD_EXECUTABLE(develop develop.cpp codes.cpp)
TARGET_LINK_LIBRARIES(develop ${SQLITE3_LIBRARIES}) 

INCLUDE (InstallRequiredSystemLibraries)
#SET (CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/License.txt")
SET (CPACK_PACKAGE_VERSION_MAJOR "${codes_VERSION_MAJOR}")
SET (CPACK_PACKAGE_VERSION_MINOR "${codes_VERSION_MINOR}")
SET (CPACK_PACKAGE_VERSION_PATCH "${codes_VERSION_PATCH}")
INCLUDE (CPack)
